visualizeResult <- data.frame(id=c(1:length(predicted_y)), value=predicted_y, label = rep(1,length(predicted_y)))
visualizeResult <- rbind(visualizeResult, data.frame(id=c(1:length(predicted_y)), value=training_y, label = rep(0,length(training_y))))
qplot(visualizeResult$id, visualizeResult$value, colour=visualizeResult$label)
modFit <- train(x=training_x,y=training_y, method = "nnet", hidden = 30)
predicted_y <- predict(modFit, training_x)
# For visualization
visualizeResult <- data.frame(id=c(1:length(predicted_y)), value=predicted_y, label = rep(1,length(predicted_y)))
visualizeResult <- rbind(visualizeResult, data.frame(id=c(1:length(predicted_y)), value=training_y, label = rep(0,length(training_y))))
qplot(visualizeResult$id, visualizeResult$value, colour=visualizeResult$label)
modFit <- train(x=training_x,y=training_y, method = "neuralnet", algorithm = 'backprop',  hidden = 30)
install.packages('xts')
Boston$cr
summary(training)
inTrain <- createDataPartition(y = Boston$medv, p = 0.6, list = FALSE)
training_x <- Boston[inTrain, 2:length(Boston)]
testing_x <- Boston[-inTrain, 2:length(Boston)]
training_y <- Boston[inTrain, 1]
testing_y <- Boston[-inTrain, 1]
# Training
my.grid <- expand.grid(.size = c(11, 10, 1))
modFit <- train(x=training_x,y=training_y, method = "nnet", hidden = 30)
predicted_y <- predict(modFit, training_x)
# For visualization
visualizeResult <- data.frame(id=c(1:length(predicted_y)), value=predicted_y, label = rep(1,length(predicted_y)))
visualizeResult <- rbind(visualizeResult, data.frame(id=c(1:length(predicted_y)), value=training_y, label = rep(0,length(training_y))))
qplot(visualizeResult$id, visualizeResult$value, colour=visualizeResult$label)
my.grid <- expand.grid(.size = c(11, 50, 1))
modFit <- train(x=training_x,y=training_y, method = "nnet", hidden = 30)
predicted_y <- predict(modFit, training_x)
# For visualization
visualizeResult <- data.frame(id=c(1:length(predicted_y)), value=predicted_y, label = rep(1,length(predicted_y)))
visualizeResult <- rbind(visualizeResult, data.frame(id=c(1:length(predicted_y)), value=training_y, label = rep(0,length(training_y))))
qplot(visualizeResult$id, visualizeResult$value, colour=visualizeResult$label)
library(dplyr)
install.packages(dplyr)
install.packages('dplyr')
library(dplyr)
install.packages('DMwR')
preImputeObj <- preProcess(Boston, method="knnImpute")
Boston <- predict(preImputeObj, Boston) +0.5
# In function [createDataPartition]
# - y should be a vector, not a data frame
# - default value for list is TRUE
inTrain <- createDataPartition(y = Boston$medv, p = 0.9, list = FALSE)
training_x <- Boston[inTrain, 2:length(Boston)]
testing_x <- Boston[-inTrain, 2:length(Boston)]
training_y <- Boston[inTrain, 1]
testing_y <- Boston[-inTrain, 1]
####################
# Training
####################
# tuneGrid: a data frame with possible tuning values.
my.grid <- expand.grid(.size = c(11, 50, 1))
# Training
modFit <- train(x=training_x,y=training_y, method = "nnet", hidden = 30)
# Make predictions
predicted_y <- predict(modFit, training_x)
# For visualization
visualizeResult <- data.frame(id=c(1:length(predicted_y)), value=predicted_y, label = rep(1,length(predicted_y)))
visualizeResult <- rbind(visualizeResult, data.frame(id=c(1:length(predicted_y)), value=training_y, label = rep(0,length(training_y))))
qplot(visualizeResult$id, visualizeResult$value, colour=visualizeResult$label)
my.grid <- expand.grid(.size = c(11, 10, 1))
# Training
modFit <- train(x=training_x,y=training_y, method = "nnet", hidden = 30)
# Make predictions
predicted_y <- predict(modFit, training_x)
# For visualization
visualizeResult <- data.frame(id=c(1:length(predicted_y)), value=predicted_y, label = rep(1,length(predicted_y)))
visualizeResult <- rbind(visualizeResult, data.frame(id=c(1:length(predicted_y)), value=training_y, label = rep(0,length(training_y))))
qplot(visualizeResult$id, visualizeResult$value, colour=visualizeResult$label)
describe(Boston)
library(Hmisc)
describe(Boston)
data(algae)
data(DMwR)
library(DMwR)
data(algae)
summary(algae)
mean(algae$a5)
summary(algae$season)
mean(algae$NO3)
algae$NO3
mean(algae$NO3, rm.NA=TRUE)
algae$NO3
summary(algae$NO3)
mean(algae$NO3, rm.NA=TRUE)
quantile(algae$a2, probs=0.9)
quantile(algae$a2, probs=0.1)
quantile(algae$a2, probs=0.5)
filter(algae, algae$a2 > quantile(algae$a2, probs=0.5))
filter(algae, algae$a2 > quantile(algae$a2, probs=0.0))
filter(algae, algae$a2 > quantile(algae$a2, probs=0.9))
table(algae$season)
table(algae$season, algaesize)
table(algae$season, algae$size)
counts <- table(algae$season)
names(counts)
which.max(counts)
names(counts)[which.max(counts)]
by(algae$a1, algae$season, summary)
by(algae$a1,algae$a4, algae$season, summary)
by(cbind(algae$a1,algae$a4), algae$season, summary)
arrange(algae, algae$NO3)
arrange(algae, algae$NO3)
aggregate(algae, algae$NO3)
aggregate(algae, algae$NO3, mean)
aggregate(algae, by=algae$NO3, mean)
algae$NO3
c(algae$NO3)
aggregate(algae, by=algae$NO3, mean)
aggregate(algae, by=list(algae$NO3), mean)
aggregate(algae, by=list(algae$season), mean)
order(aresult$NO3)
aresult <- aggregate(algae, by=list(algae$season), mean)
order(aresult$NO3)
aresult[order(aresult$NO3)]
aresult <- aggregate(algae$NO3, by=list(algae$season), mean, na.rm=T)
aresult
aresult[order(aresult$x)]
order(aresult$x)
aresult[order(aresult$x), ]
preImputeObj <- preProcess(Boston, method="knnImpute")
Boston <- predict(preImputeObj, Boston) +0.5
# In function [createDataPartition]
# - y should be a vector, not a data frame
# - default value for list is TRUE
inTrain <- createDataPartition(y = Boston$medv, p = 0.9, list = FALSE)
training_x <- Boston[inTrain, 2:length(Boston)]
testing_x <- Boston[-inTrain, 2:length(Boston)]
training_y <- Boston[inTrain, 1]
testing_y <- Boston[-inTrain, 1]
####################
# Training
####################
# tuneGrid: a data frame with possible tuning values.
my.grid <- expand.grid(.size = c(11, 10, 1))
# Training
modFit <- train(x=training_x,y=training_y, method = "nnet", hidden = 30)
# Make predictions
predicted_y <- predict(modFit, training_x)
# For visualization
visualizeResult <- data.frame(id=c(1:length(predicted_y)), value=predicted_y, label = rep(1,length(predicted_y)))
visualizeResult <- rbind(visualizeResult, data.frame(id=c(1:length(predicted_y)), value=training_y, label = rep(0,length(training_y))))
qplot(visualizeResult$id, visualizeResult$value, colour=visualizeResult$label)
qplot(algae$a6)
boxplot(algae$a6)
qplot(algae$a6)
summary(algae)
qplot(algae$size)
qplot(algae$oPO4)
qqplot(algae$oPO4)
qqplot(algae$oPO4)
qqPlot(algae$oPO4)
hist(algae$a4)
hist(algae$size)
algae$size
qplot(algae$size)
library(car)
qqPlot(algae$oPO4)
library(lattice)
histogram(~ a3 | speed, algae)
histogram(~ a3 | speed*season, algae)
boxplot(a6 ~ season, algae)
boxplot(a6, algae)
bwplot(a6 ~ season, algae)
boxplot(a6 ~ season, algae)
bwplot(a6 ~ season, algae)
library(ggplot2)
# This example uses the ChickWeight dataset, which comes with ggplot2
# First plot
p1 <-
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet, group=Chick)) +
geom_line() +
ggtitle("Growth curve for individual chicks")
# Second plot
p2 <-
ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Fitted growth curve per diet")
# Third plot
p3 <-
ggplot(subset(ChickWeight, Time==21), aes(x=weight, colour=Diet)) +
geom_density() +
ggtitle("Final weight, by diet")
# Fourth plot
p4 <-
ggplot(subset(ChickWeight, Time==21), aes(x=weight, fill=Diet)) +
geom_histogram(colour="black", binwidth=50) +
facet_grid(Diet ~ .) +
ggtitle("Final weight, by diet") +
theme(legend.position="none")        # No legend (redundant in this graph)
multiplot(p1, p2, p3, p4, cols=2)
bwplot(a6 ~ season | size, algae)
histogram(~ NO3 | size, algae)
histogram(~ a1 | speed, algae)
histogram(~ a1 | speed, algae)
bwplot(~ a1 | speed, algae)
xyplot(a4 ~ Chla | serson, algae)
xyplot(a4 ~ Chla | season, algae)
parallelplot(~algae[, 12:16] | speed, algae)
library(DMwR)
data(algae)
install.packages('quantmod')
install.packages("quantmod")
library(quantmod)
x=c(1,2,3)
y=(NA,2,NA)
y=c(NA,2,NA)
plot(x,y)
getSymbols("^GSPC", from="2014-01-01")
candleChart(GSPC)
library(DMwR)
library(caret)
library(datasets)
library(ggplot2)
data(mtcars)
set.seed(13343)
# Impute and standarize data
preImputeObj <- preProcess(Boston, method="knnImpute")
data(Boston, package='MASS')
preImputeObj <- preProcess(Boston, method="knnImpute")
Boston <- predict(preImputeObj, Boston) +0.5
data(algae)
summary(algae)
newChla <- knnImputation(algae$Chla)
newChla <- knnImputation(algae$Chla, k=5)
newChla <- knnImputation(algae$Chla, k=10)
newChla <- knnImputation(algae, k=10)
newAlgae <- knnImputation(algae, k=10)
qplot(newAlgae$Chla)
cut(newAlgae$Chla, 5)
disChla <- cut(newAlgae$Chla, 5)
table(disChla)
disChla1 <- cut(newAlgae$Chla, 5)
table(disChla1)
disChla2 <- cut(newAlgae$Chla, quantile(newAlgae$Chla,probs = seq(0,1,0.25)))
table(disChla2)
index(c(1,2,3))
index(c(4,2,3))
data(Glass, package='mlbench')
library(DmWR)
library(DMwR)
data(Glass, package='mlbench')
install.packages('mlbench')
data(Glass, package='mlbench')
ac <- partXse(type~., Glass)
ac <- rpartXse(type~., Glass)
ac <- rpartXse(type ~ ., Glass)
ac <- rpartXse(Type ~ ., Glass)
prettyTree(ac)
table(Glass$Type)
data(algae)
summary(algae)
summary(algae)
complete(algae)
complete.case(algae)
library(DMwR)
complete.case(algae)
complete.cases(algae)
algae[-complete.cases(algae),]
new_algae <- algae[complete.cases(algae),]
ar <- rpartXse(a1 ~ ., algae)
preds <- predict(ar,ts)
preds <- predict(tree, algae)
tree <- rpartXse(a1 ~ ., algae)
preds <- predict(tree, algae)
preds
prettyTree(tree)
summary(algae$a1)
qplot(algae$a1)
library(ggplot2)
qplot(algae$a1)
tree <- rpartXse(a1 ~ ., algae)
prettyTree(tree)
preds <- predict(tree, algae)
data(testAlgae)
test_preds < predict(tree, testAlgae)
test_preds <- predict(tree, testAlgae)
data(testAlgae)
test_preds <- predict(tree, testAlgae)
data(test.algae)
data(testAlgae)
test_preds <- predict(tree, test.algae)
test.algae
test_preds <- predict(tree, test.algae)
summary(algae)
names(algae)
names(test.algae)
tree <- rpartXse(a1 ~ algae[1:10], algae)
tree <- rpartXse(algae$a1 ~ algae[1:10])
tree <- rpartXse(algae$a1 ~ algae[1:10,])
tree <- rpartXse(algae$a1 ~ algae[,1:10])
algae[,1:10]
treeAlgae <- algae[, 1:10]
tree <- rpartXse(a1 ~ ., treeAlgae)
treeAlgae <- algae[, 1:11]
tree <- rpartXse(a1 ~ ., treeAlgae)
treeAlgae <- algae[, 1:12]
tree <- rpartXse(a1 ~ ., treeAlgae)
preds <- predict(tree, algae)
# Visualize the tree
prettyTree(tree)
# load test data
data(testAlgae)
test_preds <- predict(tree, test.algae)
qplot(test_preds)
qplot(c(1:length(test_preds)), test_preds)
data(algaeSols)
treeAlgae <- algae[, 1:12]
tree <- rpartXse(a1 ~ ., treeAlgae)
preds <- predict(tree, algae)
# Visualize the tree
prettyTree(tree)
data(algaeSols)
qplot(c(1:length(test_preds)), algae.sols, color='red')
algae.sols
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
qplot(c(1:length(test_preds)), test_preds)
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
qplot(c(1:length(test_preds)), test_preds)
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
qplot(c(1:length(test_preds)), test_preds)
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
test_preds
visual_data <- rbind(data.frame(result=rest_preds, rep(1, length(test_preds))), data.frame(result=algae.sols$a1, rep(0, length(test_preds))))
visual_data <- rbind(data.frame(result=rest_preds, label=rep(1, length(test_preds))), data.frame(result=algae.sols$a1, label=rep(0, length(test_preds))))
visual_data <- rbind(data.frame(result=test_preds, label=rep(1, length(test_preds))), data.frame(result=algae.sols$a1, label=rep(0, length(test_preds))))
qplot(visual_data, color=visual_data$label)
qplot(c(1:length(test_preds)), visual_data, color=visual_data$label)
qplot(x=result, data=visual_data, color=label)
visual_data
qplot(x=result, data=visual_data, colour=label)
qplot(x=result, data=visual_data, colour=label)
qplot(x=result, data=visual_data)
qplot(x=result, data=visual_data, colour=label)
plot(x=result, data=visual_data, colour=label)
qplot(x=result, data=visual_data, colour=label)
names(visual_data)
qplot(result, data=visual_data, colour=label)
qplot(x=c(1, length(test_preds), y=result, data=visual_data, colour=label)
)
qplot(x=c(1, length(test_preds), y=visual_data$result, data=visual_data, colour=label))
qplot(x=c(1, length(test_preds), y=visual_data$result, data=visual_data, colour=visual_data$label))
qplot(x=c(1, length(test_preds), y=visual_data$result, colour=visual_data$label))
qplot(x=c(1, length(test_preds), y=visual_data$result, color=visual_data$label))
boxplot(x=c(1, length(test_preds), y=visual_data$result, color=visual_data$label))
install.packeges(randomForest)
install.packeges('randomForest')
library(randomForest)
library(DMwR)
library(randomForest)
install.packages("randomForest")
￼library(randomForest)
data(Boston, package = "MASS")
samp <- sample(1:nrow(Boston), 354)
tr <- Boston[samp, ]
library(randomForest)
data(Boston,package = "MASS")
samp <- sample(1:nrow(Boston), 354)
tr <- Boston[samp, ]
ts <- Boston[-samp, ]
m <- randomForest(medv ~ ., tr)
ps <- predict(m, ts) mean(abs(ts$medv - ps))
ps <- predict(m, ts)
mean(abs(ts$medv - ps))
m <- randomForest(a1 ~ ., algae)
m <- randomForest(a1 ~ ., algae[,1:12])
nrow(algae)
samp <- sample(1:nrow(algae), 150)
samp <- sample(1:nrow(algae), 150)
tr <- algae[train,]
tr <- algae[train, ]
tr <- algae[sample, ]
samp
tr <- algae[sample, ]
summary(algae)
tr <- algae[sample, :]
tr <- algae[sample, ]
algae[c(1,2),]
samp <- sample(1:nrow(algae), 150)
tr <- newalgae[sample, ]
algae <- knnImputation(algae)
samp <- sample(1:nrow(algae), 150)
tr <- algae[sample, ]
type(sample)
sample
tr <- algae[samp, ]
ts <- algae[-samp,]
m <- randomForest(a1 ~ ., newalgae[,1:12])
m <- randomForest(a1 ~ ., algae[,1:12])
ps <- predict(m, ts)
mean(abs(ts$medv - ps))
mean(abs(ts$a1 - ps))
m <- randomForest(a1 ~ ., algae[,c(1:11,15)]
ps <- predict(m, ts)
algae <- knnImputation(algae)
samp <- sample(1:nrow(algae), 150)
tr <- algae[samp, ]
ts <- algae[-samp,]
m <- randomForest(a1 ~ ., algae[,c(1:11,15)]
ps <- predict(m, ts)
mean(abs(ts$a1 - ps))
m <- randomForest(a4 ~ ., algae[,c(1:11,15)]
ps <- predict(m, ts)
m <- randomForest(a4 ~ ., algae[,c(1:11,15)])
ps <- predict(m, ts)
mean(abs(ts$a1 - ps))
mean(abs(ts$a4 - ps)
mean(abs(ts$a4 - ps))
mean(abs(ts$a4 - ps))
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
m <- randomForest(a4 ~ ., algae[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algae[,c(1:11,15)])
summary(lm_model)
final_lm <- step(lm_model)
summary(final_lm)
m <- randomForest(a4 ~ ., algae[,c(1:11,15)], importance=T)
ps <- predict(m, ts)
mean(abs(ts$a4 - ps))
importance(m)
varImpPlot(m)
lm_predict <- predict(final_lm, ts)
ps
plot(ps, lm_predict)
install.packages('deepnet')
data(mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
tail(round(sort(hatvalues(fit)),4),1)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
sort(round(dfbeta(fit)[,2],3))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
```
## Executive summary
boxplot(mtcars$mpg)
boxplot(mtcars$mpg ~ mtcars$am)
```{r, fig.cap='figure 1}
library(dplyr)
summarise(mtcars$mpg)
summary(select(mtcars$mpg, mtcars$am=0))
summary(mtcars$am)
summary(select(mtcars$mpg, mtcars$am==0))
data(mtcars)
summary(select(mtcars$mpg, mtcars$am==0))
summary(select(mtcars, mtcars$am==0))
summary(mtcars$mpg)
summary(mtcars$mpg[mtcars$am==0])
summary(mtcars$mpg[mtcars$am==1])
sd(mtcars$mpg[mtcars$am==0])
sd(mtcars$mpg[mtcars$am==1])
step(lm(mpg ~ ., data=mtcars))
lm1 <- step(lm(mpg ~ ., data=mtcars))
summary(lm`)
summary(lm`)
summary(lm1)
summary(lm1).coefficients
summary(lm1)
summary(lm1).Coefficients
summary(lm1)$Coefficients
lm1 <- step(lm(mpg ~ ., data=mtcars))
summary(lm1)$Coefficients
lm1$Coefficients
lm1
lm2 <- lm(mpg ~ am + wt)
lm2 <- lm(mpg ~ am + wt, data=mtcars)
lm2
summary(lm2)
lm3 <- lm(mpg ~ am + qsec, data=mtcars)
summary(lm3)
summary(lm1)
lm4 <- lm(mpg ~ am, data=mtcars)
summary(lm4)
plot(lm1)
Sys.which("pdflatex")
Sys.getenv("PATH")
pdflatex
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.getenv("PATH")
require(knitr)
setwd("~/Documents/git/Data Science at Coursera/7.Regression Models")
render('project.Rmd')
render('project.Rmd')
