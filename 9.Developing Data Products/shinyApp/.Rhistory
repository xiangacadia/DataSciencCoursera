library(DMwR)
library(caret)
library(datasets)
library(ggplot2)
data(mtcars)
set.seed(13343)
# Impute and standarize data
preImputeObj <- preProcess(Boston, method="knnImpute")
data(Boston, package='MASS')
preImputeObj <- preProcess(Boston, method="knnImpute")
Boston <- predict(preImputeObj, Boston) +0.5
data(algae)
summary(algae)
newChla <- knnImputation(algae$Chla)
newChla <- knnImputation(algae$Chla, k=5)
newChla <- knnImputation(algae$Chla, k=10)
newChla <- knnImputation(algae, k=10)
newAlgae <- knnImputation(algae, k=10)
qplot(newAlgae$Chla)
cut(newAlgae$Chla, 5)
disChla <- cut(newAlgae$Chla, 5)
table(disChla)
disChla1 <- cut(newAlgae$Chla, 5)
table(disChla1)
disChla2 <- cut(newAlgae$Chla, quantile(newAlgae$Chla,probs = seq(0,1,0.25)))
table(disChla2)
index(c(1,2,3))
index(c(4,2,3))
data(Glass, package='mlbench')
library(DmWR)
library(DMwR)
data(Glass, package='mlbench')
install.packages('mlbench')
data(Glass, package='mlbench')
ac <- partXse(type~., Glass)
ac <- rpartXse(type~., Glass)
ac <- rpartXse(type ~ ., Glass)
ac <- rpartXse(Type ~ ., Glass)
prettyTree(ac)
table(Glass$Type)
data(algae)
summary(algae)
summary(algae)
complete(algae)
complete.case(algae)
library(DMwR)
complete.case(algae)
complete.cases(algae)
algae[-complete.cases(algae),]
new_algae <- algae[complete.cases(algae),]
ar <- rpartXse(a1 ~ ., algae)
preds <- predict(ar,ts)
preds <- predict(tree, algae)
tree <- rpartXse(a1 ~ ., algae)
preds <- predict(tree, algae)
preds
prettyTree(tree)
summary(algae$a1)
qplot(algae$a1)
library(ggplot2)
qplot(algae$a1)
tree <- rpartXse(a1 ~ ., algae)
prettyTree(tree)
preds <- predict(tree, algae)
data(testAlgae)
test_preds < predict(tree, testAlgae)
test_preds <- predict(tree, testAlgae)
data(testAlgae)
test_preds <- predict(tree, testAlgae)
data(test.algae)
data(testAlgae)
test_preds <- predict(tree, test.algae)
test.algae
test_preds <- predict(tree, test.algae)
summary(algae)
names(algae)
names(test.algae)
tree <- rpartXse(a1 ~ algae[1:10], algae)
tree <- rpartXse(algae$a1 ~ algae[1:10])
tree <- rpartXse(algae$a1 ~ algae[1:10,])
tree <- rpartXse(algae$a1 ~ algae[,1:10])
algae[,1:10]
treeAlgae <- algae[, 1:10]
tree <- rpartXse(a1 ~ ., treeAlgae)
treeAlgae <- algae[, 1:11]
tree <- rpartXse(a1 ~ ., treeAlgae)
treeAlgae <- algae[, 1:12]
tree <- rpartXse(a1 ~ ., treeAlgae)
preds <- predict(tree, algae)
# Visualize the tree
prettyTree(tree)
# load test data
data(testAlgae)
test_preds <- predict(tree, test.algae)
qplot(test_preds)
qplot(c(1:length(test_preds)), test_preds)
data(algaeSols)
treeAlgae <- algae[, 1:12]
tree <- rpartXse(a1 ~ ., treeAlgae)
preds <- predict(tree, algae)
# Visualize the tree
prettyTree(tree)
data(algaeSols)
qplot(c(1:length(test_preds)), algae.sols, color='red')
algae.sols
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
qplot(c(1:length(test_preds)), test_preds)
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
qplot(c(1:length(test_preds)), test_preds)
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
qplot(c(1:length(test_preds)), test_preds)
qplot(c(1:length(test_preds)), algae.sols$a1, color='red')
test_preds
visual_data <- rbind(data.frame(result=rest_preds, rep(1, length(test_preds))), data.frame(result=algae.sols$a1, rep(0, length(test_preds))))
visual_data <- rbind(data.frame(result=rest_preds, label=rep(1, length(test_preds))), data.frame(result=algae.sols$a1, label=rep(0, length(test_preds))))
visual_data <- rbind(data.frame(result=test_preds, label=rep(1, length(test_preds))), data.frame(result=algae.sols$a1, label=rep(0, length(test_preds))))
qplot(visual_data, color=visual_data$label)
qplot(c(1:length(test_preds)), visual_data, color=visual_data$label)
qplot(x=result, data=visual_data, color=label)
visual_data
qplot(x=result, data=visual_data, colour=label)
qplot(x=result, data=visual_data, colour=label)
qplot(x=result, data=visual_data)
qplot(x=result, data=visual_data, colour=label)
plot(x=result, data=visual_data, colour=label)
qplot(x=result, data=visual_data, colour=label)
names(visual_data)
qplot(result, data=visual_data, colour=label)
qplot(x=c(1, length(test_preds), y=result, data=visual_data, colour=label)
)
qplot(x=c(1, length(test_preds), y=visual_data$result, data=visual_data, colour=label))
qplot(x=c(1, length(test_preds), y=visual_data$result, data=visual_data, colour=visual_data$label))
qplot(x=c(1, length(test_preds), y=visual_data$result, colour=visual_data$label))
qplot(x=c(1, length(test_preds), y=visual_data$result, color=visual_data$label))
boxplot(x=c(1, length(test_preds), y=visual_data$result, color=visual_data$label))
install.packeges(randomForest)
install.packeges('randomForest')
library(randomForest)
library(DMwR)
library(randomForest)
install.packages("randomForest")
ï¿¼library(randomForest)
data(Boston, package = "MASS")
samp <- sample(1:nrow(Boston), 354)
tr <- Boston[samp, ]
library(randomForest)
data(Boston,package = "MASS")
samp <- sample(1:nrow(Boston), 354)
tr <- Boston[samp, ]
ts <- Boston[-samp, ]
m <- randomForest(medv ~ ., tr)
ps <- predict(m, ts) mean(abs(ts$medv - ps))
ps <- predict(m, ts)
mean(abs(ts$medv - ps))
m <- randomForest(a1 ~ ., algae)
m <- randomForest(a1 ~ ., algae[,1:12])
nrow(algae)
samp <- sample(1:nrow(algae), 150)
samp <- sample(1:nrow(algae), 150)
tr <- algae[train,]
tr <- algae[train, ]
tr <- algae[sample, ]
samp
tr <- algae[sample, ]
summary(algae)
tr <- algae[sample, :]
tr <- algae[sample, ]
algae[c(1,2),]
samp <- sample(1:nrow(algae), 150)
tr <- newalgae[sample, ]
algae <- knnImputation(algae)
samp <- sample(1:nrow(algae), 150)
tr <- algae[sample, ]
type(sample)
sample
tr <- algae[samp, ]
ts <- algae[-samp,]
m <- randomForest(a1 ~ ., newalgae[,1:12])
m <- randomForest(a1 ~ ., algae[,1:12])
ps <- predict(m, ts)
mean(abs(ts$medv - ps))
mean(abs(ts$a1 - ps))
m <- randomForest(a1 ~ ., algae[,c(1:11,15)]
ps <- predict(m, ts)
algae <- knnImputation(algae)
samp <- sample(1:nrow(algae), 150)
tr <- algae[samp, ]
ts <- algae[-samp,]
m <- randomForest(a1 ~ ., algae[,c(1:11,15)]
ps <- predict(m, ts)
mean(abs(ts$a1 - ps))
m <- randomForest(a4 ~ ., algae[,c(1:11,15)]
ps <- predict(m, ts)
m <- randomForest(a4 ~ ., algae[,c(1:11,15)])
ps <- predict(m, ts)
mean(abs(ts$a1 - ps))
mean(abs(ts$a4 - ps)
mean(abs(ts$a4 - ps))
mean(abs(ts$a4 - ps))
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
m <- randomForest(a4 ~ ., algae[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algea[,c(1:11,15)])
lm_model <- lm(a4 ~ ., algae[,c(1:11,15)])
summary(lm_model)
final_lm <- step(lm_model)
summary(final_lm)
m <- randomForest(a4 ~ ., algae[,c(1:11,15)], importance=T)
ps <- predict(m, ts)
mean(abs(ts$a4 - ps))
importance(m)
varImpPlot(m)
lm_predict <- predict(final_lm, ts)
ps
plot(ps, lm_predict)
install.packages('deepnet')
data(mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
tail(round(sort(hatvalues(fit)),4),1)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
sort(round(dfbeta(fit)[,2],3))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
```
## Executive summary
boxplot(mtcars$mpg)
boxplot(mtcars$mpg ~ mtcars$am)
```{r, fig.cap='figure 1}
library(dplyr)
summarise(mtcars$mpg)
summary(select(mtcars$mpg, mtcars$am=0))
summary(mtcars$am)
summary(select(mtcars$mpg, mtcars$am==0))
data(mtcars)
summary(select(mtcars$mpg, mtcars$am==0))
summary(select(mtcars, mtcars$am==0))
summary(mtcars$mpg)
summary(mtcars$mpg[mtcars$am==0])
summary(mtcars$mpg[mtcars$am==1])
sd(mtcars$mpg[mtcars$am==0])
sd(mtcars$mpg[mtcars$am==1])
step(lm(mpg ~ ., data=mtcars))
lm1 <- step(lm(mpg ~ ., data=mtcars))
summary(lm`)
summary(lm`)
summary(lm1)
summary(lm1).coefficients
summary(lm1)
summary(lm1).Coefficients
summary(lm1)$Coefficients
lm1 <- step(lm(mpg ~ ., data=mtcars))
summary(lm1)$Coefficients
lm1$Coefficients
lm1
lm2 <- lm(mpg ~ am + wt)
lm2 <- lm(mpg ~ am + wt, data=mtcars)
lm2
summary(lm2)
lm3 <- lm(mpg ~ am + qsec, data=mtcars)
summary(lm3)
summary(lm1)
lm4 <- lm(mpg ~ am, data=mtcars)
summary(lm4)
plot(lm1)
Sys.which("pdflatex")
Sys.getenv("PATH")
pdflatex
Sys.which("pdflatex")
apply(is.na(train), 2, sum)
library(caret)
# Load data
train <- read.csv('/Users/xiangjiang/Documents/git/Data Science at Coursera/8.Practical Machine Learning/pml-training.csv')
test <- read.csv('/Users/xiangjiang/Documents/git/Data Science at Coursera/8.Practical Machine Learning/pml-testing.csv')
train <- train[,-1]
test <- test[,-1]
(apply(is.na(train), 2, sum))
apply(!is.na(train), 2, sum)
train <- train[,apply(!is.na(train), 2, sum)>5000]
test <- test[,apply(!is.na(train), 2, sum)>5000]
col2remove <- apply(!is.na(train), 2, sum)>5000
train <- read.csv('/Users/xiangjiang/Documents/git/Data Science at Coursera/8.Practical Machine Learning/pml-training.csv')
test <- read.csv('/Users/xiangjiang/Documents/git/Data Science at Coursera/8.Practical Machine Learning/pml-testing.csv')
train <- train[,-1]
test <- test[,-1]
col2remove <- apply(!is.na(train), 2, sum)>5000
train <- train[,col2remove]
test <- test[,col2remove]
train$user_name <- factor(train$user_name)
train$cvtd_timestamp <-  factor(train$cvtd_timestamp)
train$new_window <- factor(train$new_window)
train$classe <- factor(train$classe)
test$user_name <- factor(test$user_name)
test$cvtd_timestamp <-  factor(test$cvtd_timestamp)
test$new_window <- factor(test$new_window)
# get numeric columns
numeric_cols <- sapply(train, is.numeric)
# preprocessing for training data
prep <- preProcess(train[, numeric_cols], method = c("center","scale","medianImpute"))
newTrain <- predict(prep, train[, numeric_cols])
newTrain <- cbind(train$user_name,train$cvtd_timestamp,train$new_window,newTrain)
# preprocessing for testing data
newTest <- predict(prep, test[, numeric_cols])
newTest <- cbind(test$user_name,test$cvtd_timestamp,test$new_window,newTest)
```
ctrl <- trainControl(method = "cv")
fit <- train(train$classe~., method="ctree",data=newTrain, trControl=ctrl)
fit <- train(train$classe~., method="ctree",data=newTrain)
fit <- train(train$classe~., method="ctree",data=newTrain[1:5000,])
fit <- train(train[1:5000,]$classe~., method="ctree",data=newTrain[1:5000,])
fit
ctrl <- trainControl(method = "cv", repeate=3)
fit <- train(train[1:5000,]$classe~., method="ctree",data=newTrain[1:5000,], trControl = ctrl)
fit
summary(fit)
ctrl <- trainControl(method = "cv", repeats=3)
fit <- train(train[1:5000,]$classe~., method="ctree",data=newTrain[1:5000,], trControl = ctrl)
fit
fit <- train(train[1:5000,]$classe~., method="ctree",data=newTrain[1:10000,], trControl = ctrl)
fit <- train(train[1:10000,]$classe~., method="ctree",data=newTrain[1:10000,], trControl = ctrl)
fit
ctrl <- trainControl(method = "cv", repeats=5)
fit <- train(train[1:10000,]$classe~., method="ctree",data=newTrain[1:10000,], trControl = ctrl)
fit
mod$
1
fit$method
fit$modelInfo
fit$results
fit$pred
fit$metric
fit$coefnames
fit$contrasts
fit$times
ctrl <- trainControl(method = "repeatedcv", repeats=5)
fit <- train(train[1:6000,]$classe~., method="ctree",data=newTrain[1:6000,], trControl = ctrl)
fit
fit
fit$bestTune
fit$xlevels
summary(fit)
fit$results
fit$bestTune
prediction <- predict(fit, newTest)
library(caret)
prediction <- predict(fit, newTest)
prediction <- predict(fit, newTest)
View(newTest)
View(newTest)
library(caret)
# Load data
train <- read.csv('/Users/xiangjiang/Documents/git/Data Science at Coursera/8.Practical Machine Learning/pml-training.csv')
test <- read.csv('/Users/xiangjiang/Documents/git/Data Science at Coursera/8.Practical Machine Learning/pml-testing.csv')
train <- train[,-1]
test <- test[,-1]
# remove columns with too much NA
col2remove <- apply(!is.na(train), 2, sum)>5000
train <- train[,col2remove]
test <- test[,col2remove]
train$user_name <- factor(train$user_name)
train$cvtd_timestamp <-  factor(train$cvtd_timestamp)
train$new_window <- factor(train$new_window)
train$classe <- factor(train$classe)
test$user_name <- factor(test$user_name)
test$cvtd_timestamp <-  factor(test$cvtd_timestamp)
test$new_window <- factor(test$new_window)
# get numeric columns
numeric_cols <- sapply(train, is.numeric)
# preprocessing for training data
prep <- preProcess(train[, numeric_cols], method = c("center","scale","medianImpute"))
newTrain <- predict(prep, train[, numeric_cols])
newTrain <- cbind(user_name=train$user_name,cvtd_timestamp=train$cvtd_timestamp,new_window=train$new_window,newTrain)
# preprocessing for testing data
newTest <- predict(prep, test[, numeric_cols])
newTest <- cbind(user_name=test$user_name,cvtd_timestamp=test$cvtd_timestamp,new_window=test$new_window,newTest)
View(newTest)
ctrl <- trainControl(method = "cv")
fit <- train(train[1:6000,]$classe~., method="ctree",data=newTrain[1:6000,], trControl = ctrl)
prediction <- predict(fit, newTest)
prediction
fit <- train(train[,]$classe~., method="ctree",data=newTrain[,], trControl = ctrl)
fit
prediction <- predict(fit, newTest)
prediction
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("~/Documents/git/Data Science at Coursera/8.Practical Machine Learning")
pml_write_files(prediction)
library(shiny)
runExample('shinyApp')
runExample('01_hello')
data{iris}
dataset{iris}
data(iris)
summary(iris)
Iris Classification using Decision Tree
library(ggplot2)
qplot(Sepal.Length~Sepal.Width, iris, color=Species)
qplot(Sepal.Length~Sepal.Width, data=iris, color=Species)
qplot(Sepal.Length, Sepal.Width, data=iris, color=Species)
runExample("03_reactivity")
runApp(shinyApp)
runApp('shinyApp')
getwd()
runApp('./shinyApp')
setwd("~/Documents/git/Data Science at Coursera/9.Developing Data Products/shinyApp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(caret)
fit <- train(Species~.,method="ctree", data=iris)
fancyRpartPlot(fit)
library(rattle)
fancyRpartPlot(fit)
fancyRpartPlot(fit$finalModel)
fancyRpartPlot(fit$finalModel)
library(rpart.plot)
library(rpart)
fancyRpartPlot(fit$finalModel)
fit <- train(Species~.,method="ctree", data=iris)
fancyRpartPlot(fit$finalModel)
fancyRpartPlot(fit)
fit
fancyRpartPlot(fit$finalModel)
class(fit)
fit <- rpart(Species~., method="class", data=iris)
fancyRpartPlot(fit$finalModel)
fancyRpartPlot(fit)
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
predict(fit, iris[1,])
predict(fit, iris[2,])
shiny::runApp()
fit <- rpart(Species~., data=iris)
predict(fit, iris[2,])
predict(fit, iris[3,])
predict(fit, iris[4,])
predict(fit, iris[4,])==1
predict(fit, iris[4,],type="class")
str(predict(fit, iris[4,],type="class"))
as.character(predict(fit, iris[4,],type="class"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
predict(fit, data=irir[1,])
predict(fit, irir[1,])
predict(fit, iris[1,])
predict(fit, data=iris[1,])
shiny::runApp()
as.character(factor('asdf'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
paste("123","123")
shiny::runApp()
shiny::runApp()
shiny::runApp()
